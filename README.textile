h1. PHP Sprocket

PHP Sprocket is a port of Sprockets - the ruby library for Javascript dependency management and concatenation. 
For syntax instructions visit http://getsprockets.org/installation_and_usage.

This fork is rewrite of the the original PHPSprockets by Stuart Loxton.
 
Major difference between the original port and this fork are:

* The main class file has been renamed to "Sprocket"
* Commands are now classes. It is easy to extend Sprocket with new commands.
* Instead of YML this fork uses INI files for providing constants.
* Easy to extend due more abstraction, setters and a array based option interface
* Seperate render stage (with autoRender option to mimic the original render-on-construct).
* Also works with other files, like CSS and whatever you want to concat.. (see demo)
* Fully documented sourcecode

h3. Installation

# I would start with checking the demo. It contains the basics 
# Copy/Modify the .htaccess and sprocketize.php to your webroot.
# Modify the 'lib/sprocket.php' require-path to your needs.

h3. Changes to the original sprockets.

PHP Sprockets currently acts as a transparent proxy as default and caches results. 
Because of this you do not have to initialize any classes in your app and sprocket stays separate.

For constants you can use either @<%=@ or @<?=@ this is to make the syntax closer to PHPs but still 
keep compatibility with original sprocket files.

h3. Interface

<pre><code>
$sprocket = new Sprocket($filePath, array(    
	'contentType' => 'application/x-javascript',
	'baseUri' => '/my/site/',
	'baseJs' => '/js',
	'assetFolder' => '..',
	'debugMode' => false,
	'autoRender' => false
));
</code></pre>

If @debugMode@ is enabled then resulting files aren't cached. If @autoRender@ is enabled the file will
be echoed upon construct. If @contentType@ is false instead of a string the content-type is not sent.

If you disabled autoRender (default) then you need to call the @render()@ after creating the instance.
If you pass @true@ to the render method, @render()@ will not echo the javascript and return it as string instead.

You can also ignore the second constructor parameter and use setters. Setters always return the
object itself so you can chain the commands, if you like. 

Example: @$sprocket->setDebugMode(true)->setAutoRender(false)->render()@ and so on..

Feel free to extend the class. This allows you to define a custom fileNotFound handler or overwrite the
file caching mechanism, among other things.

There is probably more cool stuff, but i am still working on this.

h3. Credits

All thanks to Stuart for porting sprockets! I just modified it a bit. :)
Special Thanks to Sam Stephenson for the original idea.


